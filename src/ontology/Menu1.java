/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ontology;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTextField;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.Syntax;
import com.hp.hpl.jena.rdf.model.*;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.Writer;
import java.util.LinkedList;

/**
 *
 * @author Luca
 */
public class Menu1 extends JFrame {

    /**
     * Creates new form Menu1
     */
    public Menu1() {

        initComponents();
        jTextPane_results.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    String path_load = null;
    boolean select_ont1, select_ont2;
    String estensione;
    boolean[] choosenOnto = {false, false, false, false};
    LinkedList<OntModel> ontologies = new LinkedList<OntModel>();
    Property prefLabel;
    LinkedList<String> ontologiesName = new LinkedList<String>();


    public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Menu1().setVisible(true);
            }

        });

        //carico ontologie
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_Cerca = new javax.swing.JButton();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        campoCerca = new javax.swing.JTextField();
        Ontologia = new javax.swing.JLabel();
        jCheckBox_Ontologia1 = new javax.swing.JCheckBox();
        jCheckBox_Ontologia2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ReadME = new javax.swing.JButton();
        jButton_Save_as = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton_Search = new javax.swing.JButton();
        jLabel_query = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane_results = new javax.swing.JTextPane();
        jCheckBox_Ontologia3 = new javax.swing.JCheckBox();
        jCheckBox_Ontologia4 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jButton_Cerca.setText("Cerca");
        jButton_Cerca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_CercaMouseClicked(evt);
            }
        });
        jButton_Cerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CercaActionPerformed(evt);
            }
        });

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ontology Browser");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setForeground(java.awt.Color.white);
        setLocation(new java.awt.Point(400, 200));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(650, 750));
        setMinimumSize(new java.awt.Dimension(650, 750));
        setPreferredSize(new java.awt.Dimension(650, 750));
        setResizable(false);
        setSize(new java.awt.Dimension(650, 750));
        setType(java.awt.Window.Type.UTILITY);

        campoCerca.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        campoCerca.setText("Type a word to search...............");
        campoCerca.setName("patternToSearch"); // NOI18N
        campoCerca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoCercaMouseClicked(evt);
            }
        });

        Ontologia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Ontologia.setText("Ontologie:");

        jCheckBox_Ontologia1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_Ontologia1.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia1.setText("GO");
        jCheckBox_Ontologia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia1ActionPerformed(evt);
            }
        });

        jCheckBox_Ontologia2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_Ontologia2.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia2.setText("ReXo");
        jCheckBox_Ontologia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Result");

        ReadME.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ReadME.setText("README");
        ReadME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReadMEMouseClicked(evt);
            }
        });
        ReadME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadMEActionPerformed(evt);
            }
        });

        jButton_Save_as.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_Save_as.setText("Export as PDF");
        jButton_Save_as.setActionCommand("");
        jButton_Save_as.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton_Save_asMousePressed(evt);
            }
        });
        jButton_Save_as.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Save_asActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ontology/logo_standard.png"))); // NOI18N

        jButton_Search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_Search.setText("Search");
        jButton_Search.setEnabled(false);
        jButton_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton_SearchMousePressed(evt);
            }
        });
        jButton_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SearchActionPerformed(evt);
            }
        });

        jLabel_query.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_query.setText("Query");

        jScrollPane3.setViewportView(jTextPane_results);

        jCheckBox_Ontologia3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_Ontologia3.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia3.setText("EDAM");
        jCheckBox_Ontologia3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia3ActionPerformed(evt);
            }
        });

        jCheckBox_Ontologia4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_Ontologia4.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia4.setText("GeXo");
        jCheckBox_Ontologia4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia4ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ontology/ontlogo.jpg"))); // NOI18N

        jTextField1.setName("queryField"); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Carica Ontologie");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ReadME, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(362, 362, 362)
                                    .addComponent(jButton_Save_as, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(campoCerca, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(Ontologia, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jCheckBox_Ontologia1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jCheckBox_Ontologia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jCheckBox_Ontologia3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jCheckBox_Ontologia4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(29, 29, 29)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(11, 11, 11)))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel_query, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCheckBox_Ontologia1, jCheckBox_Ontologia2, jCheckBox_Ontologia3, jCheckBox_Ontologia4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCerca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ontologia, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_Ontologia1)
                    .addComponent(jCheckBox_Ontologia2)
                    .addComponent(jCheckBox_Ontologia3)
                    .addComponent(jCheckBox_Ontologia4)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel_query)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReadME)
                    .addComponent(jButton_Save_as, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCheckBox_Ontologia1, jCheckBox_Ontologia2, jCheckBox_Ontologia3, jCheckBox_Ontologia4});

        getAccessibleContext().setAccessibleName("                Ontology Browser");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_CercaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_CercaMouseClicked


    }//GEN-LAST:event_jButton_CercaMouseClicked

    public JTextField getCampoCerca() {
        return campoCerca;
    }


    private void jButton_CercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CercaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_CercaActionPerformed

    private void jCheckBox_Ontologia2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_Ontologia2.isSelected()) {
            choosenOnto[1] = true;
        } else {
            choosenOnto[1] = false;
        }
        System.out.println(choosenOnto[1]);

    }//GEN-LAST:event_jCheckBox_Ontologia2ActionPerformed

    private void ReadMEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReadMEMouseClicked
        // TODO add your handling code here:

        String path = "ReadMe.pdf";
        File ReadMe = new File(path);

        try {
            Desktop.getDesktop().open(ReadMe);

        } catch (IOException ex) {
            Logger.getLogger(Menu1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ReadMEMouseClicked


    private void jCheckBox_Ontologia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia1ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_Ontologia1.isSelected()) {
            choosenOnto[0] = true;
        } else {
            choosenOnto[0] = false;
        }
        System.out.println(choosenOnto[0]);

    }//GEN-LAST:event_jCheckBox_Ontologia1ActionPerformed

    private void jCheckBox_Ontologia3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia3ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_Ontologia3.isSelected()) {
            choosenOnto[2] = true;
        } else {
            choosenOnto[2] = false;
        }
        System.out.println(choosenOnto[2]);
    }//GEN-LAST:event_jCheckBox_Ontologia3ActionPerformed

    private void jCheckBox_Ontologia4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia4ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_Ontologia4.isSelected()) {
            choosenOnto[3] = true;
        } else {
            choosenOnto[3] = false;
        }
        System.out.println(choosenOnto[3]);
    }//GEN-LAST:event_jCheckBox_Ontologia4ActionPerformed

    private void campoCercaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoCercaMouseClicked
        // TODO add your handling code here:
        campoCerca.setText("");
    }//GEN-LAST:event_campoCercaMouseClicked

    private void jButton_SearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_SearchMousePressed
        // TODO add your handling code here:
        String cerca = campoCerca.getText();
        if (jButton_Search.isEnabled() && !cerca.equals("")) {

            String query = "SELECT DISTINCT ?x  WHERE { ?x ?y ?z . FILTER (regex(?z,\"" + cerca + "\"))}";
            System.out.println(query);
            jTextPane_results.setText("");
            jTextField1.setText(query);
            for (int i = 0; i < choosenOnto.length; i++) {
                if (choosenOnto[i]) {
                    jTextPane_results.setText(jTextPane_results.getText()+"-----------------\n"+ontologiesName.get(i)+"\n-----------------------");
                    querying(ontologies.get(i));
                }
                // fruit is an element of the `fruits` array.
            }
        }

    }//GEN-LAST:event_jButton_SearchMousePressed

    private void jButton_Save_asMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_Save_asMousePressed
        // TODO add your handling code here:
        if (jTextPane_results.getText() != "") {
            try {
                scriviPDF("report.pdf", jTextPane_results.getText());
            } catch (IOException ex) {
                Logger.getLogger(Menu1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_Save_asMousePressed

    private void ReadMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReadMEActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        caricaOntologie();
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_Save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Save_asActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_Save_asActionPerformed

    private void jButton_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_SearchActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void caricaOntologie() {
        OntModel o1 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        //o1.read("..//go.owl");
        ontologies.add(o1);
        ontologiesName.add("GO ONTOLOGY");
        jCheckBox_Ontologia1.setForeground(Color.GREEN);
        OntModel o2 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o2.read("..//rexo.owl");
        ontologies.add(o2);        
        ontologiesName.add("REXO ONTOLOGY");  
        prefLabel = o2.getProperty("http://www.w3.org/2004/02/skos/core#prefLabel");
        jCheckBox_Ontologia2.setForeground(Color.GREEN);
        OntModel o3 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        //o3.read("..//EDAM.owl");
        ontologies.add(o3);
        ontologiesName.add("EDAM ONTOLOGY"); 
        jCheckBox_Ontologia3.setForeground(Color.GREEN);
        OntModel o4 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o4.read("..//gexo.owl");
        ontologies.add(o4);
        ontologiesName.add("GEXO ONTOLOGY"); 
        prefLabel = o4.getProperty("http://www.w3.org/2004/02/skos/core#prefLabel");
        jCheckBox_Ontologia4.setForeground(Color.GREEN);
        jButton_Search.setEnabled(true);
        jButton1.setVisible(false);

    }

    public void querying(OntModel m_ont) {
        String search = campoCerca.getText();
        String queryString = "SELECT DISTINCT ?x  WHERE { ?x ?y ?z . FILTER (regex(?z,\"" + search + "\",'i'))}";
        Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
        QueryExecution qexec = QueryExecutionFactory.create(query, m_ont);
        System.out.println("\nresult\n");
        StringBuilder sb = new StringBuilder();
        sb.append("\n");

        /*old reseult onlyt id uri
        ResultSet results = qexec.execSelect();
        for ( ; results.hasNext() ; )
        {
          QuerySolution soln = results.nextSolution() ;
          System.out.println(soln);
          sb.append(soln +"\n"); //<br> tag to insert line breaks
        } 
         */
        //new result with all the information(id object explosion)
        for (ResultSet results = qexec.execSelect(); results.hasNext();) {

            QuerySolution soln = results.nextSolution();
            RDFNode node = soln.get("?x");
            Resource r = node.asResource();
            for (StmtIterator lP = r.listProperties(); lP.hasNext();) {
                Statement s = lP.nextStatement();
                //System.out.println(i + " " + s.asTriple().toString());
                sb.append(" ").append(s.getSubject().getRequiredProperty(prefLabel).getObject()).append("\t");
                if (s.getObject().isLiteral() || s.getPredicate().getNameSpace().equals("http://www.w3.org/2000/01/rdf-schema#") || s.getPredicate().getNameSpace().equals("http://www.w3.org/1999/02/22-rdf-syntax-ns#")) {
                    sb.append(s.getPredicate().getLocalName()).append("\t");
                    switch (s.getPredicate().getLocalName()) {
                        case "type":
                            sb.append(s.getObject().asResource().getLocalName());
                            break;
                        case "subClassOf":
                            sb.append(s.getObject().asResource().getProperty(prefLabel).getObject());
                            break;
                        default:
                            sb.append(s.getObject().toString());
                            break;
                    }
                    sb.append("\n");
                } else {
                    sb.append(s.getPredicate().asResource().getProperty(prefLabel).getObject()).append("\t");
                    sb.append(s.getObject().asResource().getProperty(prefLabel).getObject()).append("\n");
                }
            }
            sb.append('\n');
        }

        jTextPane_results.setText(jTextPane_results.getText() + "\n-------------------------------------------------------------------------\n" + sb.toString());

    }

    public void scriviPDF(String path, String txt) throws IOException {

        Writer writer = null;
        File file = new File(path);
        writer = new BufferedWriter(new FileWriter(file));
        writer.write(txt);
        if (writer != null) {
        }
        writer.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ontologia;
    private javax.swing.JButton ReadME;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoCerca;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_Cerca;
    private javax.swing.JButton jButton_Save_as;
    private static javax.swing.JButton jButton_Search;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    static javax.swing.JCheckBox jCheckBox_Ontologia1;
    static javax.swing.JCheckBox jCheckBox_Ontologia2;
    static javax.swing.JCheckBox jCheckBox_Ontologia3;
    static javax.swing.JCheckBox jCheckBox_Ontologia4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_query;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane_results;
    // End of variables declaration//GEN-END:variables
}
