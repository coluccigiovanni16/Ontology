/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ontology;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTextField;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.Syntax;
import com.hp.hpl.jena.rdf.model.*;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;

/**
 *
 * @author Team Bioinformatic Ontology
 */
public class Menu1 extends JFrame {

    /**
     * Creates new form Menu1
     */
    public Menu1() {
        this.ontologies = new LinkedList<>();
        this.ontologiesName = new LinkedList<>();

        initComponents();
        jEditorPane1.addHyperlinkListener(e -> {
            if (HyperlinkEvent.EventType.ACTIVATED.equals(e.getEventType())) {
                System.out.println(e.getURL());
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(e.getURL().toURI());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });

        jEditorPane1.setEditable(false);
        caricaOntologie();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    String path_load = null;
    boolean select_ont1, select_ont2;
    String estensione;
    boolean[] choosenOnto = {false, false, false, false};
    LinkedList<OntModel> ontologies;
    Property prefLabel;
    LinkedList<String> ontologiesName;

    public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu1().setVisible(true);
            }

        });

        //carico ontologie
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_Cerca = new javax.swing.JButton();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        campoCerca = new javax.swing.JTextField();
        Ontologia = new javax.swing.JLabel();
        jCheckBox_Ontologia1 = new javax.swing.JCheckBox();
        jCheckBox_Ontologia2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ReadME = new javax.swing.JButton();
        jButton_Save_as = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton_Search = new javax.swing.JButton();
        jCheckBox_Ontologia3 = new javax.swing.JCheckBox();
        jCheckBox_Ontologia4 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();

        jButton_Cerca.setText("Cerca");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ontology Browser");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setForeground(java.awt.Color.white);
        setLocation(new java.awt.Point(400, 200));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(950, 750));
        setMinimumSize(new java.awt.Dimension(950, 750));
        setPreferredSize(new java.awt.Dimension(650, 750));
        setResizable(false);
        setSize(new java.awt.Dimension(950, 750));
        setType(java.awt.Window.Type.UTILITY);

        campoCerca.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoCerca.setText("Type a word to search...");
        campoCerca.setName("patternToSearch"); // NOI18N
        campoCerca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoCercaMouseClicked(evt);
            }
        });

        Ontologia.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Ontologia.setText("Ontologie:");

        jCheckBox_Ontologia1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jCheckBox_Ontologia1.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia1.setText("GO");
        jCheckBox_Ontologia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia1ActionPerformed(evt);
            }
        });

        jCheckBox_Ontologia2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jCheckBox_Ontologia2.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia2.setText("ReXo");
        jCheckBox_Ontologia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Result");

        ReadME.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ReadME.setText("README");
        ReadME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReadMEMouseClicked(evt);
            }
        });

        jButton_Save_as.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_Save_as.setText("Export");
        jButton_Save_as.setActionCommand("");
        jButton_Save_as.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton_Save_asMousePressed(evt);
            }
        });
        jButton_Save_as.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Save_asActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ontology/giphy.gif"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jButton_Search.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton_Search.setText("Search");
        jButton_Search.setEnabled(false);
        jButton_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton_SearchMousePressed(evt);
            }
        });

        jCheckBox_Ontologia3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jCheckBox_Ontologia3.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia3.setText("EDAM");
        jCheckBox_Ontologia3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia3ActionPerformed(evt);
            }
        });

        jCheckBox_Ontologia4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jCheckBox_Ontologia4.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox_Ontologia4.setText("GeXo");
        jCheckBox_Ontologia4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Ontologia4ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ontology/ontlogo.jpg"))); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ontology/logo_standard.png"))); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(campoCerca)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(Ontologia, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox_Ontologia1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox_Ontologia2)
                                        .addGap(8, 8, 8)
                                        .addComponent(jCheckBox_Ontologia3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCheckBox_Ontologia4)))
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(207, 207, 207))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(ReadME, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_Save_as, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCheckBox_Ontologia1, jCheckBox_Ontologia2, jCheckBox_Ontologia3, jCheckBox_Ontologia4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoCerca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Ontologia, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox_Ontologia1)
                            .addComponent(jCheckBox_Ontologia2)
                            .addComponent(jCheckBox_Ontologia3)
                            .addComponent(jCheckBox_Ontologia4))
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Save_as, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReadME))
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCheckBox_Ontologia1, jCheckBox_Ontologia2, jCheckBox_Ontologia3, jCheckBox_Ontologia4});

        getAccessibleContext().setAccessibleName("                Ontology Browser");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public JTextField getCampoCerca() {
        return campoCerca;
    }


    private void jCheckBox_Ontologia2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_Ontologia2.isSelected()) {
            choosenOnto[1] = true;
        } else {
            choosenOnto[1] = false;
        }
    }//GEN-LAST:event_jCheckBox_Ontologia2ActionPerformed

    private void ReadMEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReadMEMouseClicked
        // TODO add your handling code here:

        String path = "ReadMe.pdf";
        File ReadMe = new File(path);

        try {
            Desktop.getDesktop().open(ReadMe);

        } catch (IOException ex) {
            Logger.getLogger(Menu1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ReadMEMouseClicked


    private void jCheckBox_Ontologia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia1ActionPerformed
        // TODO add your handling code here:
        choosenOnto[0] = jCheckBox_Ontologia1.isSelected();
    }//GEN-LAST:event_jCheckBox_Ontologia1ActionPerformed

    private void jCheckBox_Ontologia3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia3ActionPerformed
        // TODO add your handling code here:
        choosenOnto[2] = jCheckBox_Ontologia3.isSelected();
    }//GEN-LAST:event_jCheckBox_Ontologia3ActionPerformed

    private void jCheckBox_Ontologia4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Ontologia4ActionPerformed
        // TODO add your handling code here:
        choosenOnto[3] = jCheckBox_Ontologia4.isSelected();
    }//GEN-LAST:event_jCheckBox_Ontologia4ActionPerformed


    private void campoCercaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoCercaMouseClicked
        // TODO add your handling code here:
        campoCerca.setText("");
    }//GEN-LAST:event_campoCercaMouseClicked

    private void jButton_SearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_SearchMousePressed
        // TODO add your handling code here:
        String cerca = campoCerca.getText();
        String result = "";
        if (jButton_Search.isEnabled() && !cerca.equals("")) {
            Menu1.getFrames()[0].setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            jEditorPane1.setText("");
            for (int i = 0; i < choosenOnto.length; i++) {
                if (choosenOnto[i]) {
                    result = result.concat("<p><font size = '8' face = 'arial' color = 'red'><br>-----------------------<br>"
                            + ontologiesName.get(i) + "<br>-----------------------<br></font></p><font size = '5' face = 'arial'>");
                    result = result.concat(querying(ontologies.get(i), i + 1));
                }
            }
            result = result.concat("</font></p>");
        }
        jEditorPane1.setText(result);
        Menu1.getFrames()[0].setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jButton_SearchMousePressed

    public String querying(OntModel m_ont, int ontoNum) {
        String search = campoCerca.getText();
        String queryString = "SELECT DISTINCT ?x  WHERE { ?x ?y ?z . FILTER (regex(?z,\"" + search + "\",'i'))}";
        Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
        QueryExecution qexec = QueryExecutionFactory.create(query, m_ont);
        String risultatoTemp = "";
        risultatoTemp = risultatoTemp.concat("<br><table class=\"GeneratedTable\"><tbody>");
        Property label = null;
        String subj = "", obj = "", pred = "";
        if (ontoNum == 2 || ontoNum == 4) {
            label = m_ont.getProperty("http://www.w3.org/2004/02/skos/core#prefLabel");
        } else if (ontoNum == 1 || ontoNum == 3) {
            label = m_ont.getProperty("http://www.w3.org/2000/01/rdf-schema#label");
        }
        for (ResultSet results = qexec.execSelect(); results.hasNext();) {
            QuerySolution soln = results.nextSolution();
            RDFNode node = soln.get("?x");
            Resource r = node.asResource();
            for (StmtIterator lP = r.listProperties(); lP.hasNext();) {
                Statement s = lP.nextStatement();
                risultatoTemp = risultatoTemp.concat("<br>");
                if (s.getSubject().isResource()) {
                    if (s.getSubject().asResource().hasProperty(label)) {
                        subj = ("<a href='" + s.getSubject().asResource().getURI() + "/'>"
                                + s.getSubject().asResource().getRequiredProperty(label).getObject() + "</a>      ");
                    } else {
                        subj = ((s.getSubject().getLocalName() + "      "));
                    }
                } else {
                    subj = ((s.getSubject().toString() + "      "));
                }
                if (s.getPredicate().isResource()) {
                    if (s.getPredicate().asResource().hasProperty(label)) {
                        pred = ("   <a href='" + s.getPredicate().asResource().getURI() + "/'>"
                                + s.getPredicate().asResource().getRequiredProperty(label).getObject() + "</a>      ");
                    } else {
                        pred = ((s.getPredicate().getLocalName() + "      "));
                    }
                } else {
                    pred = ((s.getPredicate().toString() + "      "));
                }
                if (s.getObject().isResource()) {
                    if (s.getObject().asResource().hasProperty(label)) {
                        obj = ("  <a href='" + s.getObject().asResource().getURI() + "/'>"
                                + s.getObject().asResource().getRequiredProperty(label).getObject() + "</a>      ");
                    } else {
                        obj = ((s.getObject().asResource().getLocalName() + "      "));
                    }
                } else {
                    obj = ((s.getObject().toString() + "      "));
                }
                risultatoTemp = risultatoTemp.concat("<tr><td>" + subj + "</td><td>" + pred + "</td><td>" + obj + "</td></tr><br>");
            }

        }
        risultatoTemp = risultatoTemp.concat("</tbody></table><br>-------------------------------------------------------------------------<br>");
        return risultatoTemp;
    }


    private void jButton_Save_asMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_Save_asMousePressed
        if (!"".equals(jEditorPane1.getText())) {
            sceglifile(jEditorPane1.getText());
        } else {
        }
    }//GEN-LAST:event_jButton_Save_asMousePressed

    private void jButton_Save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Save_asActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_Save_asActionPerformed

    private void caricaOntologie() {
        OntModel o1 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o1.read("..//go1.owl");
        ontologies.add(o1);
        ontologiesName.add("GO ONTOLOGY");
        jCheckBox_Ontologia1.setForeground(Color.blue);
        OntModel o2 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o2.read("..//rexo1.owl");
        ontologies.add(o2);
        ontologiesName.add("REXO ONTOLOGY");
        OntModel o3 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o3.read("..//EDAM1.owl");
        ontologies.add(o3);
        ontologiesName.add("EDAM ONTOLOGY");
        jCheckBox_Ontologia3.setForeground(Color.black);
        OntModel o4 = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, null);
        o4.read("..//gexo1.owl");
        ontologies.add(o4);
        ontologiesName.add("GEXO ONTOLOGY");
        jCheckBox_Ontologia4.setForeground(Color.green);
        jButton_Search.setEnabled(true);

    }

    public static void sceglifile(String resultToPDF) {
        String filename;
        JFileChooser savefile = new JFileChooser();
        int returnVal = savefile.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File pr = savefile.getSelectedFile();
            filename = pr.getName();
            String path = savefile.getCurrentDirectory().getAbsolutePath() + "//" + filename + ".html";
            try {
                scriviHTML(path, resultToPDF);
            } catch (IOException ex) {
                Logger.getLogger(Menu1.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public static void scriviHTML(String path, String tesxtFromResult) throws IOException {

        Writer writer = null;

        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(path)));
            writer.write(tesxtFromResult);
        } catch (IOException ex) {
            // Report
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ontologia;
    private javax.swing.JButton ReadME;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoCerca;
    private javax.swing.JButton jButton_Cerca;
    private javax.swing.JButton jButton_Save_as;
    private static javax.swing.JButton jButton_Search;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    static javax.swing.JCheckBox jCheckBox_Ontologia1;
    static javax.swing.JCheckBox jCheckBox_Ontologia2;
    static javax.swing.JCheckBox jCheckBox_Ontologia3;
    static javax.swing.JCheckBox jCheckBox_Ontologia4;
    private static javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
